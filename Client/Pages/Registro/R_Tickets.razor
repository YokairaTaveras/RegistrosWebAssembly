@page "/RegistroTickets"
@page "/RegistroTickets/{TicketId:int}"
@inject HttpClient httpclient

<EditForm model = "Clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class ="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Tickets.</h3>
            </div>
            <div class=card-body>

                <div class= "col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>ID Ticket:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value ="tickets.TicketId" class="form-control" aria-describedby="BotonBuscar"/>
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class ="oi oi-magnifying-glass"/></button>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="tickets.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => tickets.Fecha)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="SolicitadoPor">Solicitado Por:</label>
                    <InputText @bind-Value="tickets.SolicitadoPor" class="form-control"/>
                    <ValidationMessage For="@(() => tickets.SolicitadoPor)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Asunto">Asunto:</label>
                    <InputText @bind-Value="tickets.Asunto" class="form-control"/>
                    <ValidationMessage For="@(() => tickets.Asunto)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripcion:</label>
                    <InputText @bind-Value="tickets.Descripcion" class="form-control"/>
                    <ValidationMessage For="@(() => tickets.Descripcion)" />
                </div>

            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"/></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                    <button type="button" class="btn btn-outline-danger"@onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
                </div>
            </div>
        </div>
    </div>

</EditForm>
<label>@mensaje</label>

@code
{
    [Parameter]

    public int TicketId { get; set; }
    public Tickets tickets { get; set; } = new Tickets();
    public string mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(TicketId > 0)
        {
            tickets.TicketId = TicketId;
            await Buscar();
        }
    }
    public async Task Buscar()
    {
        var ticketEncontrado = await httpclient.GetFromJsonAsync<Tickets>($"api/Prioridades/{tickets.TicketId}");

        if(ticketEncontrado != null)
        {
            this.tickets = ticketEncontrado;
            StateHasChanged();
        }
        else
        {
            mensaje = "Ese ticket no se ha encontrado";
        }
    }

    public async void Guardar()
    {
        using var respuesta = await httpclient.PostAsJsonAsync("api/Tickets", tickets);

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }

            var ticketDevuelto = await respuesta.Content.ReadFromJsonAsync<Tickets>();
        
            if(ticketDevuelto is not null)
            {
                tickets = ticketDevuelto;
                StateHasChanged();
            } 
        }
    }

    public void Nuevo()
    {
        this.tickets = new Tickets();
        mensaje = string.Empty;
    }

    public bool Validar()
    {
        if(string.IsNullOrEmpty(tickets.SolicitadoPor))
        {
            return false;
        }
        if(string.IsNullOrEmpty(tickets.Asunto))
        {
            return false;
        }
        if(string.IsNullOrEmpty(tickets.Descripcion))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Eliminar()
    {
        using var respuesta = await httpclient.DeleteAsync($"api/Tickets/{tickets.TicketId}");

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }
            else
            {
                Nuevo();
            }   
        }
    }
}